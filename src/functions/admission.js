import bot from '../settings/app';
import * as keyboard from './keyboards';
import * as usersModel from '../models/usersModel';

require('dotenv').config();

const TELEMAC_ID = process.env.TELEMAC_ID || undefined;

// The bot enters here if the command matches the Regex.
bot.onText(/^\/admision/, async msg => {
	const chatID = msg.chat.id;
	const chatType = msg.chat.type;
	const fromID = msg.from.id;
	const chatFirstname = msg.from.first_name;

	let guard = await usersModel.verifyTelegramID(fromID);

	if (guard) {
		await usersModel.registerTelegramData(msg.from);
	}

	// Check if the user writes to the bot in private, this causes the command not to work in groups.
	if (chatType === 'private') {
		bot.sendMessage(
			chatID,
			`Hola ${chatFirstname}, bienvenido a la admisiÃ³n del MAC 2020. Â¿Ya asististe a la preinscripciÃ³n para poder formalizar la entrevista y que seas parte de la admisiÃ³n de este aÃ±o?`,
			keyboard.preLogin
		);
	}
	// If they try to place the command in the main group (teleMAC) the bot will warn them that it cannot be given that it is only available in private chat.
	else if (chatID == TELEMAC_ID) {
		bot.sendMessage(chatID, `Mira ${fromID}, no quiero hacer spam en este grupo. AsÃ­ que escribeme en privado.`);
	}
});

bot.on('message', msg => {
	const fromID = msg.from.id;
	const chatType = msg.chat.type;

	// Check if the user writes to the bot in private, this causes the command not to work in groups.
	if (chatType === 'private') {
		if (msg.text.indexOf('ğŸ’³ Carnet') === 0) {
			bot.sendMessage(
				fromID,
				'Introduce tu nÃºmero de carnet con el siguiente formato:\n\n_00_*-*_0000_',
				keyboard.replyOpts
			)
				.then(sended => {
					// Escucha la solicitud del carnet.
					bot.onReplyToMessage(sended.chat.id, sended.message_id, async msg => {
						let regex = msg.text.match(/^[0-9]{2}-[0-9]{5}$/g);
						if (regex === null) {
							bot.sendMessage(
								fromID,
								'Introdujiste tu nÃºmero de carnet mal, asegurate que lo estÃ¡s escribiendo bien con el formato solicitado.\n\nY vuelve a presionar el botÃ³n, no tengo problema en pasar todo el dia aquÃ­ en este loop infinito.',
								keyboard.teclado_login
							);
						} else {
							bot.sendMessage(fromID, `Perfecto ${msg.text}`);
							await usersModel.searchCarnet(msg.text);
						}
					});
				})
				.catch(err => {
					bot.sendMessage(fromID, 'Hubo un problema en enviarte algÃºn mensaje.');
					throw new Error('Hubo un problema al momento de presionar el botÃ³n de Carnet.', err);
				});
		}

		if (msg.text.indexOf('SÃ­') === 0) {
			bot.sendMessage(
				fromID,
				`*Â¡PerfectisÃ­simo!*\n\nAhora solo toca esperar relajadamente hasta el dÃ­a de la primera reuniÃ³n que serÃ¡ el miÃ©rcoles de semana 4 *(29/01/2020)* en hora 7 *(14:00)*.\n\nSi por alguna razÃ³n que se te escapa de la manos no puedes asistir, comunÃ­calo lo mÃ¡s pronto posible para considerar tu caso. Te esperamos ansiosamente, Â¡No faltes!`,
				{ parse_mode: 'Markdown' }
			);
		}

		if (msg.text.indexOf('Â¿Ahora quÃ©?') === 0) {
			bot.sendMessage(
				fromID,
				'Sencillo, asistir a la reuniÃ³n y justo despuÃ©s de que termine dicha reuniÃ³n yo mismo te escribirÃ© para darte las proximas instrucciones. Para algo soy un bot, Â¿No crees?',
				{ parse_mode: 'Markdown' }
			);
		}

		if (msg.text.indexOf('No') === 0) {
			bot.sendMessage(
				fromID,
				`*Â¡Â¿CÃ³mo que no?! Â¡Â¿Y quÃ© estÃ¡s esperando?!*\n\nNo seas tÃ­mido y acÃ©rcate a *MYS-018* para que podamos conocerte a profundidad ( Í¡Â° ÍœÊ– Í¡Â°).\n\nRecuerda que si no has sido entrevistado antes del martes de semana 4 *(28/01/2019)* no podrÃ¡s formalizar tu inscripciÃ³n en el proceso de admisiÃ³n.`,
				{ parse_mode: 'Markdown' }
			);
		}
	}
});
